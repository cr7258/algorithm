package leetcode.dp;

/**
 * @author chengzw
 * @description 打家劫舍 I
 * <p>
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
 * 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 * <p>
 * 输入：[1,2,3,1]
 * 输出：4
 * 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 * 偷窃到的最高金额 = 1 + 3 = 4 。
 * @since 2021/10/25
 */

/**
 * 思路：
 * 1.用一个二维数组 dp[i][j] 表示第 i 个房屋偷或者不偷能偷窃到的最高金额，j 为 0 或者 1，0 表示不偷，1 表示偷
 * 2.如果第 i 个房子偷，那么第 i - 1 个房子就不能偷；如果第 i 个房子不偷，那么第 i - 1 个房子可偷可不偷
 * 3.状态转移方程：
 * dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1])
 * dp[i][1] = dp[i-1][0]
 */
public class Rob1 {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        // dp[i][0] 表示第 i 个房子不偷的最高金额，dp[i][1] 表示第 i 个房子偷的最高金额
        int[][] dp = new int[n][2];

        // 初始化第一个房子
        dp[0][0] = 0;
        dp[0][1] = nums[0];

        for (int i = 1; i < n; i++) {
            // 不偷
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            // 偷
            dp[i][1] = dp[i - 1][0] + nums[i];
        }

        // 找到金额最大的
        return Math.max(dp[n - 1][0], dp[n - 1][1]);
    }
}
