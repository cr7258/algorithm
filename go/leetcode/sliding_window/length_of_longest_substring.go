package sliding_window

/**
 * @author chengzw
 * @description 3. 无重复字符的最长子串
 * @link https://leetcode.cn/problems/longest-substring-without-repeating-characters/
 * @since 2022/5/26
 * <p>
 * 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
 * <p>
 * 示例1:
 * 输入: s = "abcabcbb"
 * 输出: 3
 * 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
 * <p>
 * 示例 2:
 * 输入: s = "bbbbb"
 * 输出: 1
 * 解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
 * <p>
 * 示例 3:
 * 输入: s = "pwwkew"
 * 输出: 3
 * 解释: 因为无重复字符的最长子串是"wke"，所以其长度为 3。
 * 请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
 */

/**
给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。

示例1:
输入: s = "abcabcbb"
输出: 3
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是"wke"，所以其长度为 3。
请注意，你的答案必须是子串的长度，"pwke" 是一个子序列，不是子串。
*/

/**
思路：滑动窗口
1.使用哈希表记录字符是否在子串中出现过
2.两个指针，左指针向右移动，说明有元素重复，删除哈希表中该元素
3.右指针向右移动，子串扩展，哈希表添加元素
4.变量 ans 记录子串的最大长度

时间复杂度：O(n)，其中 n 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。
空间复杂度：O(∣Σ∣)，其中 Σ 表示字符集（即字符串中可以出现的字符）。
*/

func lengthOfLongestSubstring(s string) int {
	// 哈希表记录字符是否在子串中出现过, true 表现出现过，false 表示没有出现过
	m := map[byte]bool{}
	// 右指针 r，初始值为 -1，相当于在字符串的左边界的左侧，还没有开始移动
	// ans 记录子串的最大长度
	r, ans := -1, 0
	for i := 0; i < len(s); i++ {
		if i != 0 {
			// 左指针向右移动，说明有元素重复，删除哈希表中该元素
			delete(m, s[i-1])
		}
		for r+1 < len(s) && !m[s[r+1]] {
			// 移动右指针，子串扩展，哈希表添加元素
			m[s[r+1]] = true
			r++
			// 获取当前子串的最大长度
			ans = max(ans, r-i+1)
		}
	}
	return ans
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}
